import pygamd
from numba import cuda
import numba as nb
import numpy as np
from scipy import interpolate
import math
from pygamd.forces.table_reader import table_reader
from sys import argv

	
mst = pygamd.snapshot.read("coor.mst")
dt = float(argv[1]) #time unit 1 = 1ps
timestep = dt / np.sqrt(104) ## using reduced mass unit 1=100amu 
app = pygamd.application.dynamics(info=mst, dt=timestep)

fn = pygamd.force.nonbonded(info=mst, rcut=1.75, func="pair_table", exclusion=["bond", "angle"])
fn.setParams(type_i="P", type_j="P", param=table_reader.get_parameters("pair.table", n_points=1751, rcut=1.750))
app.add(fn)

fb = pygamd.force.bond(info=mst, func="bond_table")
fb.setParams(bond_type = 'P-P', param=table_reader.get_parameters("bond.table", n_points=2000, rcut=1.999))
app.add(fb)

fa = pygamd.force.angle(info=mst, func="angle_table")
fa.setParams(angle_type = 'P-P-P', param=table_reader.get_parameters("angle.table", n_points=2000, rcut=np.pi))
app.add(fa)


Kernel = np.loadtxt("BeforeKernel.txt")[:,1]/np.sqrt(104)
Kernel = Kernel.astype(np.float32)
n_integration = Kernel.shape[0]

# Colored noise is generated by a series of white noise multiply a series of coefficient
# More sepcific, we use Fourier transform to get the series of coefficient. Details can be 
# found in 10.1021/acs.jctc.7b00274
def ft(f, t):
    w = 2 * np.pi * np.fft.fftfreq(len(f)) / (t[1] - t[0])
    g = np.fft.fft(f)
    g *= (t[1] - t[0]) * np.exp(-complex(0, 1) * w * t[0])
    return g, w


def ift(f, w, t):
    f *= np.exp(complex(0, 1) * w * t[0])
    g = np.fft.ifft(f)
    g *= len(f) * (w[1] - w[0]) / (2 * np.pi)
    return g

def ColoredNoiseCoefficient(kernel, t):
    kernel_sym = np.concatenate((kernel[:0:-1], kernel))
    t_sym = np.concatenate((-t[:0:-1], t))
    kernel_ft, w = ft(kernel_sym, t_sym)
    sqk_ft = np.sqrt(kernel_ft)
    sqk = ift(sqk_ft, w, t_sym).real
    return sqk

T = 500
Temperature = T / 120.27236

t = np.arange(n_integration) * dt
RfCoef = ColoredNoiseCoefficient(Kernel, t).astype(np.float32) * np.sqrt(dt)

gle = pygamd.integration.gle(info=mst, group="all", Kernel=Kernel, RfCoef=RfCoef, temperature=Temperature, seed=210, n_itg=n_integration)
app.add(gle)

eq_time = int(2e3)
# Short equilibrium simulation
app.run(eq_time)


di = pygamd.dump.data(info=mst, group='all', file='data.log', period=100)
app.add(di)

dd = pygamd.dump.mst(info=mst, group="all", file="output.mst", properties=["position", "image", "velocity", "force"], period=int(1))
app.add(dd)

run_time = int(3e3)
# Production simulation
app.run(run_time)

